#!/usr/bin/env python3

# TODO: Bake version info into build artifacts.
# TODO: Make more verbose.

import lib.base
from lib.usage import usage
import lib.compressors.css
import getopt
import json
import itertools
import re
import subprocess
import sys

builds = {}
silent = False
utleyCfg = None
verbose = False
reTaskRef = re.compile(r'utley -*(\w+)')

def buildTargetOrTask(allTargetAndTaskOpts, json):
    for arg in allTargetAndTaskOpts:
        if '--' in arg:
            # Chop off '--' prefix.
            task = arg[2:]

            if not silent:
                spinner('Initiating ' + task + ' task... ')

            doTask(task, json)

            if not silent:
                print('Completed\n')
        else:
            buildTarget(arg, json)

def main(argv):
    global silent
    global verbose

    configFile = 'utley.json'
    dumpTarget = None
    task = None

    # TODO: Can this be cleaned up?
    # \A = Matches only at the start of the string.
    shortOpts = [arg for arg in argv if re.search('\A-{1}\w', arg)]
    # Match `--clean` or `js`
    allTargetAndTaskOpts = [arg for arg in argv if re.search('\A[-{2}\w|\w+]', arg)]

    try:
        opts, args = getopt.getopt(shortOpts, 'c:hl:st:v')
    except getopt.GetoptError:
        print('[ERROR] Unrecognized flag!')
        usage()
        sys.exit(1)

    for opt, arg in opts:
        if opt == '-h':
            usage()
            sys.exit(0)
        elif opt == '-c':
            configFile = arg
        elif opt == '-l':
            dumpTarget = arg
        elif opt == '-s':
            silent = True
        elif opt == '--task':
            task = arg
        elif opt == '-v':
            verbose = True

    json = lib.base.getJson(configFile)
    # Run all targets, `utley`
#    if not len(targetOpts) and not len(taskOpts):
    if not len(allTargetAndTaskOpts):
        # Assumes `utley.json` config file.
        for target in json:
            if target == 'tasks':
                continue

            buildTarget(target, json)
    elif len(allTargetAndTaskOpts):
        # This provides a shortcut for calling top-level targets (js, css, etc.) or shell commands
        # defined in the `tasks` block.
        buildTargetOrTask(allTargetAndTaskOpts, json)
    else:
        print('[ERROR] No ' + target + ' target found, aborting.')
        sys.exit(1)

def buildTarget(target, json):
    if not silent:
        print('Initiating ' + target + ' target...')

    # Allows for building a top-level target by name, i.e. `js@foo`.
    if '@' in target:
        # Redefine `target` since as it needs to be either js, json or css.
        [target, name] = target.split('@')
        ls = [item for item in getTarget(target, json) if item.get('name') == name]
    else:
        ls = getTarget(target, json)

    doTarget(json, target, ls)

def doCompress(cfg, target, buff):
    global utleyCfg

    if not utleyCfg:
        utleyCfg = lib.base.getJson(lib.base.getConfigFileLocation())

    lang = utleyCfg.get(target)
    compressor = cfg.get('compress') if cfg.get('compress') != None else lang.get('compress')

    if lang and compressor:
        if not silent:
            spinner('\t\t[INF] Compressing target ' + target + '... ')

        if target == 'css' or target == 'json':
            buff = lib.compressors.css.compress(buff)
        elif target == 'js':
            buff = subprocess.check_output(compressor + ' <(echo "' + buff + '")', shell=True, executable='/bin/bash', universal_newlines=True)

        if not silent:
            print('Completed')
    elif not silent:
        print('\t\t[INF] No compression operation')

    return buff

def doConcat(target, targetName):
    global builds

    preprocessed = None

    for targetCfg in target:
        if not silent:
            print('\n\t[TARGET] Building target ' + targetCfg.get('output'))
            spinner('\t\t[INF] Concatenating target... ')

        buff = []

        src = targetCfg.get('src')
        outputFile = targetCfg.get('output')
        dependencies = targetCfg.get('dependencies', [])
        exclude = targetCfg.get('exclude', [])
        name = targetCfg.get('name', '')

        ls = lib.base.sift_list(
            lib.base.make_list(src),
            targetName,
            lib.base.make_list(exclude),
            lib.base.make_list(dependencies)
        )

        for script in ls:
            # If script is a named target then retrieve it from the global `builds` dict.
            # Note that it assumes the named target was already built!
            if script[0] == '@':
                buff.append(''.join(builds.get(script[1:])))
            else:
                script = open(script, 'r')

                for line in script:
                    buff.append(line)

                script.close()

        lib.base.write_buffer(buff, outputFile)

        if not silent:
            print('Completed')

        # If a named target then skip here, it probably was preprocessed the first time when it was built.
        buff = doTranspile(targetCfg, targetName, outputFile)
        buff = doCompress(targetCfg, targetName, buff)

        if buff:
            lib.base.write_buffer(buff, outputFile)

        if name:
            builds.update({
                name: buff
            })

def doTarget(json, target, ls):
    # If operating on one of the known extensions then pass it directly on.
    if target in lib.base.compressors.keys():
        doConcat(ls, target)
    else:
        if ls == None:
            print('[ERROR] Unrecognized target `' + target + '`')
            sys.exit(1)
        else:
            for subtarget in ls:
                buildTarget(subtarget, ls)

def doTask(key, json):
    tasks = json.get('tasks')
    task = tasks.get(key)

    if task:
        if verbose:
            print('[DEBUG] Processing -> ' + task)

        # If the task references another task, don't create a subprocess.
        if 'utley' in task:
            buildTargetOrTask([arg for arg in task.split(' ')[1:] if re.search('\A[-{2}\w|\w+]', arg)], json)
        else:
            # Instead of handling a non-zero exit code here and throwing, each shell command will have
            # to clean up after itself.
            subprocess.call(task, shell=True)
    elif not task and not silent:
        print('[ERROR] Unrecognized task `' + key + '`')
        sys.exit(1)

def doTranspile(cfg, target, outputFile):
    global utleyCfg
    buff = ''

    if not utleyCfg:
        utleyCfg = lib.base.getJson(lib.base.getConfigFileLocation())

    lang = utleyCfg.get(target)
    transpiler = cfg.get('transpile') if cfg.get('transpile') != None else lang.get('transpile')

    if lang and transpiler:
        if not silent:
            spinner('\t\t[INF] Transpiling target ' + target + ' using ' +  transpiler + '... ')

        buff = subprocess.getoutput(transpiler + ' ' + outputFile)

        if not silent:
            print('Completed')
    elif not silent:
        with open(outputFile) as f:
            buff = f.read()

        print('\t\t[INF] No transpilation operation')

    # Return the filepath if no transpilation has occurred.
    return buff

def getNestedTarget(keys, ls):
    for key in keys:
        ls = ls.get(key)

    return ls

def getTarget(target, json):
    # Check to see if target is a subtarget (i.e., 'quizzes.chord_builder').
    # It will only be dot-separated if explicitly passed as a build target.
    return getNestedTarget(target.split('.'), json) if '.' in target else json.get(target)

def spinner(msg):
    spinner = itertools.cycle(['-', '\\', '|', '/'])

    sys.stdout.write(msg + next(spinner))
    sys.stdout.write('\b')
    sys.stdout.flush()
    sys.stdout.write('\b')

if __name__ == '__main__':
    main(sys.argv[1:])

