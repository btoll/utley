#!/usr/bin/env python3

# TODO: Bake version info into build artifacts.
# TODO: Make more verbose.

import lib.base
from lib.usage import usage
import lib.compressors.css
import getopt
import json
import itertools
import re
import subprocess
import sys

builds = {}
silent = False
utleyCfg = None
verbose = False

def main(argv):
    global silent
    global verbose

    configFile = 'utley.json'
    dumpTarget = None
    task = None
    targets = None

    # \A = Matches only at the start of the string.
    targetOpts = [arg for arg in argv if re.search('\A\w+', arg)]
    shortOpts = [arg for arg in argv if re.search('\A-{1}\w', arg)]
    taskOpts = [arg for arg in argv if re.search('\A-{2}\w', arg)]

    try:
        opts, args = getopt.getopt(shortOpts, 'c:hl:st:v')
    except getopt.GetoptError:
        print('[ERROR] Unrecognized flag!')
        usage()
        sys.exit(1)

    for opt, arg in opts:
        if opt == '-h':
            usage()
            sys.exit(0)
        elif opt == '-c':
            configFile = arg
        elif opt == '-l':
            dumpTarget = arg
        elif opt == '-s':
            silent = True
        elif opt == '-t':
            targets = lib.base.make_list(arg)
        elif opt == '--task':
            task = arg
        elif opt == '-v':
            verbose = True

    if not len(targetOpts) and not len(taskOpts) and not targets:
        # Assumes `utley.json` config file.
        initiateBuild(None, configFile)
    elif len(taskOpts):
        # This provides a shortcut for calling shell commands defined in the `tasks` block. For example, the `clean` script
        # could be called as `utley --clean`. So, anything defined in the `tasks` block can be aliased by prefixing `--`.
        for arg in taskOpts:
            # Chop off '--' prefix.
            doTask(arg[2:], lib.base.getJson(configFile))
    else:
        # This provides a shortcut for calling target. For example, the `build` target could be called as `utley build`.
        for arg in targetOpts:
            initiateBuild(lib.base.make_list(arg), configFile)
#    else:
#        if dumpTarget:
#            print(json.dumps(lib.base.getJson(configFile).get(dumpTarget), indent=4) + '\n')
#        elif targets:
#            initiateBuild(targets, configFile)
#        elif task:
#            doTask(task, lib.base.getJson(configFile))
#        else:
#            print('[ERROR] No ' + target + ' target found, aborting.')
#            sys.exit(1)

def buildTarget(target, json):
    if not isinstance(target, dict):
        if not silent:
            print('Initiating ' + target + ' target...')

        # Allows for building a top-level target by name, i.e. `js@foo`.
        if '@' in target:
            # Redefine `target` since as it needs to be either js, json or css.
            [target, name] = target.split('@')
            ls = [item for item in getTarget(target, json) if item.get('name') == name]
        else:
            ls = getTarget(target, json)

        if containsTargetReferences(ls):
            doTargetReference(ls, json, target)
        else:
            doTarget(json, target, ls)

    else:
        # If a dict then we can't recurse any further, compress and we're done.
        for key, value in target.items():
            if key in lib.base.compressors.keys():
                doConcat(target.get(key), key)

def containsTargetReferences(target):
    return isinstance(target, list) and isinstance(target[0], str)

def doCompress(cfg, target, src):
    global utleyCfg
    buff = ''

    if not utleyCfg:
        utleyCfg = lib.base.getJson(lib.base.getConfigFileLocation())

    lang = utleyCfg.get(target)
    compressor = cfg.get('compress') or lang.get('compress')

    if lang and compressor:
#        if not silent:
#            message = '[INF] Compressing target'
#
#            # Note that the CSS is compressed using regexes so there is no compressor to name.
#            if not isinstance(compressor, bool):
#                message += ' with compressor ' + compressor
#
#            message += '... '
#            spinner(message)

        if target == 'css' or target == 'json':
            buff = lib.compressors.css.compress(src)
        elif target == 'js':
            buff = subprocess.getoutput(compressor + ' ' + src)
    elif not silent:
        print('[INF] No compressor found')

    return buff

def doConcat(target, targetName):
    global builds

    preprocessed = None

    for targetCfg in target:
        if not silent:
            print('[INF] Building target ' + targetCfg.get('output'))
            spinner('[INF] Concatenating target... ')

        buff = []

        src = targetCfg.get('src')
        outputFile = targetCfg.get('output')
        dependencies = targetCfg.get('dependencies', [])
        exclude = targetCfg.get('exclude', [])
        name = targetCfg.get('name', '')

        ls = lib.base.sift_list(
            lib.base.make_list(src),
            targetName,
            lib.base.make_list(exclude),
            lib.base.make_list(dependencies)
        )

        for script in ls:
            # If script is a named target then retrieve it from the global `builds` dict.
            # Note that it assumes the named target was already built!
            if script[0] == '@':
                buff.append(''.join(builds.get(script[1:])))
            else:
                script = open(script, 'r')

                for line in script:
                    buff.append(line)

                script.close()

        lib.base.write_buffer(buff, outputFile)

        if not silent:
            print('Completed')

        # If a named target then skip here, it probably was preprocessed the first time when it was built.
#        buff = doTranspile(targetCfg, targetName, outputFile)
        buff = doCompress(targetCfg, targetName, outputFile)

        if buff:
            lib.base.write_buffer(buff, outputFile)

        if name:
            builds.update({
                name: buff
            })

def doTarget(json, target, ls):
    # If operating on one of the known extensions then pass it directly on.
    if target in lib.base.compressors.keys():
        doConcat(ls, target)
    else:
        if ls == None:
            print('[ERROR] Unrecognized target `' + target + '`')
            sys.exit(1)
        else:
            for subtarget in ls:
                buildTarget(subtarget, ls)

def doTargetReference(ls, json, target):
    for ref in ls:
        if ref[0] == '#':
            doTask(ref[1:], json)
        else:
            ls = getTarget(ref, json)
            doTarget(json, ref, ls)

def doTask(key, json):
    tasks = json.get('tasks')
    task = tasks.get(key)

    if task:
        if verbose:
            print('[DEBUG] Processing -> ' + task)

        if not silent:
            spinner('[INF] Running ' + key + ' target... ')

        # Instead of handling a non-zero exit code here and throwing, each shell command will have
        # to clean up after itself.
        subprocess.call(task, shell=True)

        if not silent:
            print('Completed')
    elif not task and not silent:
        print('[ERROR] Unrecognized task `' + key + '`')
        sys.exit(1)

def doTranspile(cfg, target, src):
    global utleyCfg
    buff = ''

    if not utleyCfg:
        utleyCfg = lib.base.getJson(lib.base.getConfigFileLocation())

    lang = utleyCfg.get(target)
    transpiler = cfg.get('transpile') or lang.get('transpile')

    if lang and transpiler:
        if not silent:
            spinner('[INF] Transpiling target ' + target + ' using ' +  transpiler + '... ')

        buff = subprocess.getoutput(transpiler + ' ' + src)

        if not silent:
            print('Completed')
    elif not silent:
        print('[INF] No transpiler found')

    return buff

def getNestedTarget(keys, ls):
    for key in keys:
        ls = ls.get(key)

    return ls

def getTarget(target, json):
    # Check to see if target is a subtarget (i.e., 'quizzes.chord_buider').
    # It will only be dot-separated if explicitly passed as a build target.
    return getNestedTarget(target.split('.'), json) if '.' in target else json.get(target)

def initiateBuild(targets=None, configFile='utley.json'):
    json = lib.base.getJson(configFile)

    if targets:
        for target in targets:
            buildTarget(target, json)
    else:
        for target in json:
            if target == 'tasks':
                continue

            buildTarget(target, json)

def spinner(msg):
    spinner = itertools.cycle(['-', '\\', '|', '/'])

    sys.stdout.write(msg + next(spinner))
    sys.stdout.write('\b')
    sys.stdout.flush()
    sys.stdout.write('\b')

if __name__ == '__main__':
    main(sys.argv[1:])

